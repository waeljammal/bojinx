package com.bojinx.api.context
{
	import com.bojinx.api.context.config.IConfigItem;
	import com.bojinx.api.processor.display.IStageProcessor;
	import com.bojinx.system.build.definition.ObjectDefinitionFactory;
	import com.bojinx.system.cache.definition.ObjectDefinition;
	import com.bojinx.system.cache.store.Cache;
	import com.bojinx.system.context.loaders.settings.ViewSettings;
	import com.bojinx.system.display.DisplayObjectRouter;
	import com.bojinx.system.message.MessageBus;
	import com.bojinx.system.processor.queue.ProcessorQueue;
	import com.bojinx.system.processor.queue.ProcessorQueueBuilder;
	
	import flash.events.IEventDispatcher;
	import flash.system.ApplicationDomain;
	
	/**
	 * Defines the contract for the ApplicationContext
	 * 
	 * @author Wael Jammal
	 */
	public interface IApplicationContext extends IEventDispatcher
	{
		/**
		 * Returns the Processor Queue Builder that can be used
		 * to generate a queue for a root object and returns a queue
		 * containing the root object and all it's dependencies that require
		 * processing.
		 * 
		 * @see com.bojinx.system.processor.queue.ProcessorQueueBuilder
		 * @return ProcessorQueueBuilder
		 */
		function get processorQueueBuilder():ProcessorQueueBuilder;
		
		/**
		 * Returns true if the context is in the process of unloading.
		 * 
		 * @default false
		 */
		function get isUnloading():Boolean;
		
		/**
		 * Returns true if the context is ready for loading and has
		 * passed it's initialization phase.
		 * 
		 * @default false
		 */
		function get isReadyForLoad():Boolean;
		
		/**
		 * Returns the ApplicationDomain associated with the Context.
		 * 
		 * @return ApplicationDomain
		 */
		function get applicationDomain():ApplicationDomain;
		
		/**
		 * Returns the cache container that provides access to all the
		 * different caching mechanisims used by Bojinx, this can also
		 * be used to access dynamic caches generated by third party processors.
		 * 
		 * @see com.bojinx.system.cache.store.Cache
		 * @return Cache
		 */
		function get cache():Cache;
		
		/** @private */
		function get configFiles():Array;
		
		/**
		 * Returns the definition factor that can be used
		 * to generate new <code>ObjectDefinition</code> wrappers
		 * for beans.
		 * 
		 * @see com.bojinx.system.build.definition.ObjectDefinitionFactory
		 * @return ObjectDefinitionFactory
		 */
		function get definitionFactory():ObjectDefinitionFactory;
		
		/**
		 * Use this to set your Display Processor which will be in charge
		 * of detecting display objects that require processing.
		 * 
		 * @return IStageProcessor compatible processor.
		 */
		function get displayProcessor():IStageProcessor;
		
		/** @private */
		function set displayProcessor( value:IStageProcessor ):void;
		
		/** @private */
		function get displayRouter():DisplayObjectRouter;
		
		/**
		 * Returns the ID of the Context.
		 * 
		 * @default Auto Generated
		 */
		function get id():String;
		
		/**
		 * Returns true if the context is fully loaded.
		 * 
		 * @default false
		 * @return True if context is ready
		 */
		function get isLoaded():Boolean;
		
		/** @private */
		function get isLoading():Boolean;
		
		/**
		 * Returns the Message Bus associated with this
		 * context.
		 * 
		 * @see com.bojinx.system.message.MessageBus
		 * @return MessageBus 
		 */
		function get messageBus():MessageBus;
		
		/** @private */
		function set messageBus( value:MessageBus ):void;
		
		/**
		 * Returns the owner of the Context.
		 * 
		 * @return Object
		 */
		function get owner():Object;
		
		/**
		 * Returns the parent context is one exists.
		 * 
		 * @return IApplicationContext Parent.
		 */
		function get parent():IApplicationContext;
		
		/**
		 * Use this to set your View Settings for the context.
		 */
		function get viewSettings():ViewSettings;
		
		/** @private */
		function set viewSettings( value:ViewSettings ):void;
		
		/** @private */
		function attachDisplayProcessor(parent:IApplicationContext):void;
		
		/**
		 * Force the usage of another ApplicationDomain on this context,
		 * please be sure you know what you are doing before changing
		 * the default domain.
		 *
		 * @param domain new ApplicationDomain to set.
		 */
		function useDomain(domain:ApplicationDomain):void;
		
		/**
		 * Loads the context, this is called automatically when using MXML
		 * and autoLoad is set to true, in Pure Actionscript you have to call
		 * this manually.
		 */
		function load():void;
		
		/**
		 * Adds a configuration item to the context.
		 * 
		 * @param config IConfigItem
		 */
		function addConfig(config:IConfigItem):void;
		
		/**
		 * Returns an <code>ObjectDefinition</code> by it's ID.
		 * 
		 * @param id String ID of the definition or bean.
		 * @return ObjectDefinition
		 */
		function getDefinitionById( id:String ):ObjectDefinition;
		
		/**
		 * Returns an <code>ObjectDefinition</code> by it's Type.
		 * 
		 * @param clazz Class Type of the definition or bean.
		 * @return ObjectDefinition
		 */
		function getDefinitionByType( clazz:Class ):ObjectDefinition;
		
		/**
		 * Process a definition, this will only run if the definition has never been processed before.
		 * 
		 * @param definition ObjectDefinition to process
		 * @autoRun If true then processing will be automatic else returns a ProcessorQueue you can run manually
		 * @destroy If true returns or runs a queue based on destruction phase.
		 * @queue If set then all queue entries will be appended to this queue and a new one will not be created.
		 * 
		 * @return ProcessorQueue
		 */
		function processDefinition( definition:ObjectDefinition, autoRun:Boolean = true, destroy:Boolean = false, queue:ProcessorQueue = null, data:* = null ):ProcessorQueue;
		
		/**
		 * Process an Object, this will only run if the object has never been processed before.
		 * 
		 * @param object Object to process
		 * @singleton If true object will be cached as a singleton
		 * @autoRun If true then processing will be automatic else returns a ProcessorQueue you can run manually
		 * @queue If set then all queue entries will be appended to this queue and a new one will not be created.
		 * 
		 * @return ProcessorQueue
		 */
		function processObject( object:Object, singleton:Boolean = false, autoRun:Boolean = true, queue:ProcessorQueue = null ):ProcessorQueue;
		
		/**
		 * Releases an object, moving all references held by Bojinx
		 * to that object for garbage collection.
		 * 
		 * @param object Object instance to release
		 * @autoRun If true then processing will be automatic else returns a ProcessorQueue you can run manually
		 */
		function releaseObject( object:Object, autoRun:Boolean = true ):ProcessorQueue;
		
		/**
		 * Unloads the context, which also calls destroy on any
		 * objects and clears all the caches.
		 */
		function unload():void;
	}
}
